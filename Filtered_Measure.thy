theory Filtered_Measure
imports "HOL-Probability.Conditional_Expectation" Measure_Space_Addendum
begin                                                                                          

section \<open>Filtered Measure\<close>

locale filtered_measure = 
  fixes M F and t\<^sub>0 :: "'b :: {second_countable_topology, linorder_topology}"
  assumes subalgebra: "\<And>i. t\<^sub>0 \<le> i \<Longrightarrow> subalgebra M (F i)"
      and sets_F_mono: "\<And>i j. t\<^sub>0 \<le> i \<Longrightarrow> i \<le> j \<Longrightarrow> sets (F i) \<le> sets (F j)"
begin

lemma space_F: 
  assumes "t\<^sub>0 \<le> i"
  shows "space (F i) = space M"
  using subalgebra assms by (simp add: subalgebra_def)

lemma subalgebra_F: 
  assumes "t\<^sub>0 \<le> i" "i \<le> j"
  shows "subalgebra (F j) (F i)"
  unfolding subalgebra_def using assms by (simp add: space_F sets_F_mono)

lemma borel_measurable_mono:
  assumes "t\<^sub>0 \<le> i" "i \<le> j"
  shows "borel_measurable (F i) \<subseteq> borel_measurable (F j)"
  unfolding subset_iff by (metis assms subalgebra_F measurable_from_subalg)

end

section \<open>Filtered Sigma Finite Measure\<close>

text \<open>The locale presented here is a generalization of the \<^locale>\<open>sigma_finite_subalgebra\<close> for a particular filtration.\<close>

locale filtered_sigma_finite_measure = filtered_measure +
  assumes sigma_finite: "sigma_finite_subalgebra M (F t\<^sub>0)"

lemma (in filtered_sigma_finite_measure) sigma_finite_subalgebra_F[intro]:
  assumes "t\<^sub>0 \<le> i"
  shows "sigma_finite_subalgebra M (F i)"
  using assms by (metis dual_order.refl sets_F_mono sigma_finite sigma_finite_subalgebra.nested_subalg_is_sigma_finite subalgebra subalgebra_def)

subsection "Constant Filtration"

lemma filtered_measure_constant_filtration:
  assumes "subalgebra M F"
  shows "filtered_measure M (\<lambda>_. F) t\<^sub>0"
  using assms by (unfold_locales) (auto simp add: subalgebra_def)

sublocale sigma_finite_subalgebra \<subseteq> constant_filtration: filtered_sigma_finite_measure M "\<lambda>_ :: 't :: {second_countable_topology, linorder_topology}. F" t\<^sub>0
  using subalg by (unfold_locales) (auto simp add: subalgebra_def)

subsection "Natural Filtration"

text \<open>A natural filtration for a family of random variables \<^term>\<open>Y\<close> is an increasing sequence of sigma algebras generated by all events involving the process up to the time index \<^term>\<open>t\<close>, i.e., \<^term>\<open>\<Sigma> t = \<sigma>({Y s | s. s \<le> t})\<close>.\<close>

definition natural_filtration :: "'a measure \<Rightarrow> 'b \<Rightarrow> ('b \<Rightarrow> 'a \<Rightarrow> 'c :: topological_space) \<Rightarrow> 'b :: {second_countable_topology, linorder_topology} \<Rightarrow> 'a measure" where
  "natural_filtration M t\<^sub>0 Y = (\<lambda>t. sigma_gen (space M) borel {Y i | i. i \<in> {t\<^sub>0..t}})"

context
  fixes Y :: "'b :: {second_countable_topology, linorder_topology} \<Rightarrow> 'a \<Rightarrow> 'c :: topological_space" and M N t\<^sub>0
  assumes Y_meas[measurable]: "\<And>i. t\<^sub>0 \<le> i \<Longrightarrow> Y i \<in> borel_measurable M"
begin

lemma sets_natural_filtration': "sets (natural_filtration M t\<^sub>0 Y t) = sigma_sets (space M) (\<Union>i\<in>{t\<^sub>0..t}. {Y i -` A \<inter> space M | A. A \<in> borel})"
  unfolding natural_filtration_def sets_sigma_gen by (intro sigma_sets_eqI) blast+

lemma
  shows sets_natural_filtration: "sets (natural_filtration M t\<^sub>0 Y t) = sigma_sets (space M) (\<Union>i\<in>{t\<^sub>0..t}. {Y i -` A \<inter> space M | A. open A})" 
    and space_natural_filtration[simp]: "space (natural_filtration M t\<^sub>0 Y t) = space M"
proof -
  show "space (natural_filtration M t\<^sub>0 Y t) = space M" unfolding natural_filtration_def space_sigma_gen ..
  show "sets (natural_filtration M t\<^sub>0 Y t) = sigma_sets (space M) (\<Union>i\<in>{t\<^sub>0..t}. {Y i -` A \<inter> space M | A. open A})" unfolding sets_natural_filtration'
  proof (intro sigma_sets_eqI, clarify)
    fix i and A :: "'c set" assume asm: "i \<in> {t\<^sub>0..t}" " A \<in> sets borel"
    hence "A \<in> sigma_sets UNIV {S. open S}" unfolding borel_def by simp
    thus "Y i -` A \<inter> space M \<in> sigma_sets (space M) (\<Union>i\<in>{t\<^sub>0..t}. {Y i -` A \<inter> space M |A. open A})"
    proof (induction)
      case (Compl a)
      have "Y i -` (UNIV - a) \<inter> space M = space M - (Y i -` a \<inter> space M)" by blast
      then show ?case using Compl(2)[THEN sigma_sets.Compl] by presburger
    next
      case (Union a)
      have "Y i -` \<Union> (range a) \<inter> space M = \<Union> (range (\<lambda>j. Y i -` a j \<inter> space M))" by blast
      then show ?case using Union(2)[THEN sigma_sets.Union] by presburger
    qed (auto intro: asm)
  qed (intro sigma_sets.Basic, fastforce)
qed

lemma subalgebra_natural_filtration: 
  shows "subalgebra M (natural_filtration M t\<^sub>0 Y i)" 
  unfolding subalgebra_def using measurable_family_iff_contains_sigma_gen by (force simp add: natural_filtration_def)

global_interpretation filtered_measure_natural_filtration: filtered_measure M "natural_filtration M t\<^sub>0 Y" t\<^sub>0 
  by (unfold_locales) (intro subalgebra_natural_filtration, simp only: sets_natural_filtration, intro sigma_sets_subseteq, force) 

end

text \<open>In order to show that the natural filtration constitutes a filtered sigma finite measure, we need to provide a countable exhausting set in the preimage of \<^term>\<open>Y t\<^sub>0\<close>.\<close>

lemma (in sigma_finite_measure) filtered_sigma_finite_measure_natural_filtration:
  assumes [measurable]: "\<And>i. t\<^sub>0 \<le> i \<Longrightarrow> Y i \<in> borel_measurable M"
      and exhausting_set: "countable A" "(\<Union>A) = space M" "\<And>a. a \<in> A \<Longrightarrow> emeasure M a \<noteq> \<infinity>" "\<And>a. a \<in> A \<Longrightarrow> \<exists>b \<in> borel. a = Y t\<^sub>0 -` b"
    shows "filtered_sigma_finite_measure M (natural_filtration M t\<^sub>0 Y) t\<^sub>0"
proof (unfold_locales)
  have "A \<subseteq> sets (restr_to_subalg M (natural_filtration M t\<^sub>0 Y t\<^sub>0))" using assms(1) exhausting_set by (simp add: sets_restr_to_subalg[OF subalgebra_natural_filtration] sets_natural_filtration') fast
  moreover have "\<Union> A = space (restr_to_subalg M (natural_filtration M t\<^sub>0 Y t\<^sub>0))" unfolding space_restr_to_subalg using exhausting_set by simp
  moreover have "\<forall>a\<in>A. emeasure (restr_to_subalg M (natural_filtration M t\<^sub>0 Y t\<^sub>0)) a \<noteq> \<infinity>" using calculation(1) exhausting_set(3) by (auto simp add: sets_restr_to_subalg[OF subalgebra_natural_filtration] emeasure_restr_to_subalg[OF subalgebra_natural_filtration])
  ultimately show "\<exists>A. countable A \<and> A \<subseteq> sets (restr_to_subalg M (natural_filtration M t\<^sub>0 Y t\<^sub>0)) \<and> \<Union> A = space (restr_to_subalg M (natural_filtration M t\<^sub>0 Y t\<^sub>0)) \<and> (\<forall>a\<in>A. emeasure (restr_to_subalg M (natural_filtration M t\<^sub>0 Y t\<^sub>0)) a \<noteq> \<infinity>)" using exhausting_set by blast
qed (auto intro: subalgebra_natural_filtration assms(1))

subsection \<open>Typed locales\<close>

locale nat_filtered_measure = filtered_measure M F 0 for M and F :: "nat \<Rightarrow> _"
locale real_filtered_measure = filtered_measure M F 0 for M and F :: "real \<Rightarrow> _"

context nat_filtered_measure
begin

lemma space_F: "space (F i) = space M"
  using subalgebra by (simp add: subalgebra_def)

lemma subalgebra_F: 
  assumes "i \<le> j"
  shows "subalgebra (F j) (F i)"
  unfolding subalgebra_def using assms by (simp add: space_F sets_F_mono)

lemma borel_measurable_mono:
  assumes "i \<le> j"
  shows "borel_measurable (F i) \<subseteq> borel_measurable (F j)"
  unfolding subset_iff by (metis assms subalgebra_F measurable_from_subalg)

end

locale nat_filtered_sigma_finite_measure = filtered_sigma_finite_measure M F 0 for M and F :: "nat \<Rightarrow> _"
locale real_filtered_sigma_finite_measure = filtered_sigma_finite_measure M F 0 for M and F :: "real \<Rightarrow> _"

sublocale nat_filtered_sigma_finite_measure \<subseteq> sigma_finite_subalgebra M "F i" by blast

end