theory Filtered_Measure
imports "HOL-Probability.Conditional_Expectation" "HOL-Probability.Stopping_Time" Measure_Space_Addendum
begin                                                                                          

unbundle lattice_syntax

section \<open>Filtered Measure\<close>

locale filtered_measure = filtration "space M" F for M and F :: "'t :: {second_countable_topology, linorder_topology, order_bot} \<Rightarrow> 'a measure" +
  assumes subalgebra: "\<And>i. subalgebra M (F i)"

section \<open>Filtered Sigma Finite Measure\<close>

text \<open>The locale presented here is a generalization of the \<^locale>\<open>sigma_finite_subalgebra\<close> for a particular filtration.\<close>

locale filtered_sigma_finite_measure = filtered_measure M F for M and F :: "'t :: {second_countable_topology, linorder_topology, order_bot} \<Rightarrow> 'a measure" +
  assumes sigma_finite: "sigma_finite_subalgebra M (F \<bottom>)"

sublocale filtered_sigma_finite_measure \<subseteq> sigma_finite_subalgebra M "F i" by (metis bot.extremum sigma_finite subalgebra sets_F_mono sigma_finite_subalgebra.nested_subalg_is_sigma_finite subalgebra_def)

subsection "Constant Filtration"

lemma filtered_measure_constant_filtration:
  assumes "subalgebra M F"
  shows "filtered_measure M (\<lambda>_. F)"
  using assms by (unfold_locales) (auto simp add: subalgebra_def)

sublocale sigma_finite_subalgebra \<subseteq> constant_filtration: filtered_sigma_finite_measure M "\<lambda>_ :: 't :: {second_countable_topology, linorder_topology, order_bot}. F"
  using subalg by (unfold_locales) (auto simp add: subalgebra_def)

subsection "Natural Filtration"

text \<open>A natural filtration for a family of random variables \<^term>\<open>Y\<close> is an increasing sequence of sigma algebras generated by all events involving the process up to the time index \<^term>\<open>t\<close>, i.e., \<^term>\<open>\<Sigma> t = \<sigma>({Y s | s. s \<le> t})\<close>.\<close>

definition natural_filtration :: "'a measure \<Rightarrow> 's measure \<Rightarrow> ('t \<Rightarrow> 'a \<Rightarrow> 's) \<Rightarrow> 't :: {second_countable_topology, linorder_topology, order_bot} \<Rightarrow> 'a measure" where
  "natural_filtration M N Y = (\<lambda>t. sigma_gen (space M) N {Y i | i. i \<le> t})"

context
  fixes Y :: "'t :: {second_countable_topology, linorder_topology, order_bot} \<Rightarrow> 'a \<Rightarrow> 's" and M N
  assumes Y_meas[measurable]: "\<And>i. Y i \<in> M \<rightarrow>\<^sub>M N"
begin

lemma
  shows sets_natural_filtration[simp]: "sets (natural_filtration M N Y t) = sigma_sets (space M) (\<Union>i \<le> t. {Y i -` A \<inter> space M | A. A \<in> N})" 
    and space_natural_filtration[simp]: "space (natural_filtration M N Y t) = space M"
  by (standard; subst natural_filtration_def) (auto simp add: natural_filtration_def space_restr_to_subalg subalgebra_def intro!: sets.sigma_sets_subset measurable_sets sigma_sets_mono)

lemma subalgebra_natural_filtration: "subalgebra M (natural_filtration M N Y i)" by (simp add: subalgebra_def, auto intro!: sets.sigma_sets_subset measurable_sets)

global_interpretation filtered_measure_natural_filtration: filtered_measure M "natural_filtration M N Y" by (unfold_locales) (simp, simp, fastforce intro!: sigma_sets_subseteq, intro subalgebra_natural_filtration)

end

text \<open>In order to show that the natural filtration constitutes a filtered sigma finite measure, we need to provide a countable exhausting set in the preimage of \<^term>\<open>Y \<bottom>\<close>.\<close>

lemma (in sigma_finite_measure) filtered_sigma_finite_measure_natural_filtration:
  assumes [measurable]: "\<And>i. Y i \<in> M \<rightarrow>\<^sub>M N"
      and exhausting_set: "countable A" "(\<Union>A) = space M" "\<And>a. a \<in> A \<Longrightarrow> emeasure M a \<noteq> \<infinity>" "\<And>a. a \<in> A \<Longrightarrow> \<exists>b \<in> N. a = Y \<bottom> -` b"
    shows "filtered_sigma_finite_measure M (natural_filtration M N Y)"
proof (unfold_locales)
  have "A \<subseteq> sets (restr_to_subalg M (natural_filtration M N Y \<bottom>))" unfolding sets_restr_to_subalg[OF subalgebra_natural_filtration, OF assms(1)] using exhausting_set by simp fast
  moreover have "\<Union> A = space (restr_to_subalg M (natural_filtration M N Y \<bottom>))" unfolding space_restr_to_subalg using exhausting_set by simp
  moreover have "\<forall>a\<in>A. emeasure (restr_to_subalg M (natural_filtration M N Y \<bottom>)) a \<noteq> \<infinity>" using calculation(1) exhausting_set(3) by (auto simp add: sets_restr_to_subalg[OF subalgebra_natural_filtration] emeasure_restr_to_subalg[OF subalgebra_natural_filtration])
  ultimately show "\<exists>A. countable A \<and> A \<subseteq> sets (restr_to_subalg M (natural_filtration M N Y \<bottom>)) \<and> \<Union> A = space (restr_to_subalg M (natural_filtration M N Y \<bottom>)) \<and> (\<forall>a\<in>A. emeasure (restr_to_subalg M (natural_filtration M N Y \<bottom>)) a \<noteq> \<infinity>)" using exhausting_set by blast
qed (auto intro: subalgebra_natural_filtration assms(1))

subsection \<open>Typed locales\<close>

locale nat_filtered_measure = filtered_measure M F for M and F :: "nat \<Rightarrow> _"
locale ennreal_filtered_measure = filtered_measure M F for M and F :: "ennreal \<Rightarrow> _"

end